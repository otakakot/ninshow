// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PasswordAuthn is an object representing the database table.
type PasswordAuthn struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID string    `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Value     []byte    `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *passwordAuthnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L passwordAuthnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PasswordAuthnColumns = struct {
	ID        string
	AccountID string
	CreatedAt string
	UpdatedAt string
	Value     string
}{
	ID:        "id",
	AccountID: "account_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Value:     "value",
}

var PasswordAuthnTableColumns = struct {
	ID        string
	AccountID string
	CreatedAt string
	UpdatedAt string
	Value     string
}{
	ID:        "password_authns.id",
	AccountID: "password_authns.account_id",
	CreatedAt: "password_authns.created_at",
	UpdatedAt: "password_authns.updated_at",
	Value:     "password_authns.value",
}

// Generated where

var PasswordAuthnWhere = struct {
	ID        whereHelperstring
	AccountID whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Value     whereHelper__byte
}{
	ID:        whereHelperstring{field: "\"password_authns\".\"id\""},
	AccountID: whereHelperstring{field: "\"password_authns\".\"account_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"password_authns\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"password_authns\".\"updated_at\""},
	Value:     whereHelper__byte{field: "\"password_authns\".\"value\""},
}

// PasswordAuthnRels is where relationship names are stored.
var PasswordAuthnRels = struct {
	Account string
}{
	Account: "Account",
}

// passwordAuthnR is where relationships are stored.
type passwordAuthnR struct {
	Account *Account `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
}

// NewStruct creates a new relationship struct
func (*passwordAuthnR) NewStruct() *passwordAuthnR {
	return &passwordAuthnR{}
}

func (r *passwordAuthnR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

// passwordAuthnL is where Load methods for each relationship are stored.
type passwordAuthnL struct{}

var (
	passwordAuthnAllColumns            = []string{"id", "account_id", "created_at", "updated_at", "value"}
	passwordAuthnColumnsWithoutDefault = []string{"account_id", "value"}
	passwordAuthnColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	passwordAuthnPrimaryKeyColumns     = []string{"id"}
	passwordAuthnGeneratedColumns      = []string{}
)

type (
	// PasswordAuthnSlice is an alias for a slice of pointers to PasswordAuthn.
	// This should almost always be used instead of []PasswordAuthn.
	PasswordAuthnSlice []*PasswordAuthn
	// PasswordAuthnHook is the signature for custom PasswordAuthn hook methods
	PasswordAuthnHook func(context.Context, boil.ContextExecutor, *PasswordAuthn) error

	passwordAuthnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	passwordAuthnType                 = reflect.TypeOf(&PasswordAuthn{})
	passwordAuthnMapping              = queries.MakeStructMapping(passwordAuthnType)
	passwordAuthnPrimaryKeyMapping, _ = queries.BindMapping(passwordAuthnType, passwordAuthnMapping, passwordAuthnPrimaryKeyColumns)
	passwordAuthnInsertCacheMut       sync.RWMutex
	passwordAuthnInsertCache          = make(map[string]insertCache)
	passwordAuthnUpdateCacheMut       sync.RWMutex
	passwordAuthnUpdateCache          = make(map[string]updateCache)
	passwordAuthnUpsertCacheMut       sync.RWMutex
	passwordAuthnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var passwordAuthnAfterSelectMu sync.Mutex
var passwordAuthnAfterSelectHooks []PasswordAuthnHook

var passwordAuthnBeforeInsertMu sync.Mutex
var passwordAuthnBeforeInsertHooks []PasswordAuthnHook
var passwordAuthnAfterInsertMu sync.Mutex
var passwordAuthnAfterInsertHooks []PasswordAuthnHook

var passwordAuthnBeforeUpdateMu sync.Mutex
var passwordAuthnBeforeUpdateHooks []PasswordAuthnHook
var passwordAuthnAfterUpdateMu sync.Mutex
var passwordAuthnAfterUpdateHooks []PasswordAuthnHook

var passwordAuthnBeforeDeleteMu sync.Mutex
var passwordAuthnBeforeDeleteHooks []PasswordAuthnHook
var passwordAuthnAfterDeleteMu sync.Mutex
var passwordAuthnAfterDeleteHooks []PasswordAuthnHook

var passwordAuthnBeforeUpsertMu sync.Mutex
var passwordAuthnBeforeUpsertHooks []PasswordAuthnHook
var passwordAuthnAfterUpsertMu sync.Mutex
var passwordAuthnAfterUpsertHooks []PasswordAuthnHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PasswordAuthn) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range passwordAuthnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PasswordAuthn) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range passwordAuthnBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PasswordAuthn) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range passwordAuthnAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PasswordAuthn) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range passwordAuthnBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PasswordAuthn) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range passwordAuthnAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PasswordAuthn) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range passwordAuthnBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PasswordAuthn) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range passwordAuthnAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PasswordAuthn) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range passwordAuthnBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PasswordAuthn) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range passwordAuthnAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPasswordAuthnHook registers your hook function for all future operations.
func AddPasswordAuthnHook(hookPoint boil.HookPoint, passwordAuthnHook PasswordAuthnHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		passwordAuthnAfterSelectMu.Lock()
		passwordAuthnAfterSelectHooks = append(passwordAuthnAfterSelectHooks, passwordAuthnHook)
		passwordAuthnAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		passwordAuthnBeforeInsertMu.Lock()
		passwordAuthnBeforeInsertHooks = append(passwordAuthnBeforeInsertHooks, passwordAuthnHook)
		passwordAuthnBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		passwordAuthnAfterInsertMu.Lock()
		passwordAuthnAfterInsertHooks = append(passwordAuthnAfterInsertHooks, passwordAuthnHook)
		passwordAuthnAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		passwordAuthnBeforeUpdateMu.Lock()
		passwordAuthnBeforeUpdateHooks = append(passwordAuthnBeforeUpdateHooks, passwordAuthnHook)
		passwordAuthnBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		passwordAuthnAfterUpdateMu.Lock()
		passwordAuthnAfterUpdateHooks = append(passwordAuthnAfterUpdateHooks, passwordAuthnHook)
		passwordAuthnAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		passwordAuthnBeforeDeleteMu.Lock()
		passwordAuthnBeforeDeleteHooks = append(passwordAuthnBeforeDeleteHooks, passwordAuthnHook)
		passwordAuthnBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		passwordAuthnAfterDeleteMu.Lock()
		passwordAuthnAfterDeleteHooks = append(passwordAuthnAfterDeleteHooks, passwordAuthnHook)
		passwordAuthnAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		passwordAuthnBeforeUpsertMu.Lock()
		passwordAuthnBeforeUpsertHooks = append(passwordAuthnBeforeUpsertHooks, passwordAuthnHook)
		passwordAuthnBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		passwordAuthnAfterUpsertMu.Lock()
		passwordAuthnAfterUpsertHooks = append(passwordAuthnAfterUpsertHooks, passwordAuthnHook)
		passwordAuthnAfterUpsertMu.Unlock()
	}
}

// One returns a single passwordAuthn record from the query.
func (q passwordAuthnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PasswordAuthn, error) {
	o := &PasswordAuthn{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlb: failed to execute a one query for password_authns")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PasswordAuthn records from the query.
func (q passwordAuthnQuery) All(ctx context.Context, exec boil.ContextExecutor) (PasswordAuthnSlice, error) {
	var o []*PasswordAuthn

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlb: failed to assign all query results to PasswordAuthn slice")
	}

	if len(passwordAuthnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PasswordAuthn records in the query.
func (q passwordAuthnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to count password_authns rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q passwordAuthnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlb: failed to check if password_authns exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *PasswordAuthn) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (passwordAuthnL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePasswordAuthn interface{}, mods queries.Applicator) error {
	var slice []*PasswordAuthn
	var object *PasswordAuthn

	if singular {
		var ok bool
		object, ok = maybePasswordAuthn.(*PasswordAuthn)
		if !ok {
			object = new(PasswordAuthn)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePasswordAuthn)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePasswordAuthn))
			}
		}
	} else {
		s, ok := maybePasswordAuthn.(*[]*PasswordAuthn)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePasswordAuthn)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePasswordAuthn))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &passwordAuthnR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &passwordAuthnR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.PasswordAuthn = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.PasswordAuthn = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the passwordAuthn to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.PasswordAuthn.
func (o *PasswordAuthn) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"password_authns\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, passwordAuthnPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &passwordAuthnR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			PasswordAuthn: o,
		}
	} else {
		related.R.PasswordAuthn = o
	}

	return nil
}

// PasswordAuthns retrieves all the records using an executor.
func PasswordAuthns(mods ...qm.QueryMod) passwordAuthnQuery {
	mods = append(mods, qm.From("\"password_authns\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"password_authns\".*"})
	}

	return passwordAuthnQuery{q}
}

// FindPasswordAuthn retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPasswordAuthn(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PasswordAuthn, error) {
	passwordAuthnObj := &PasswordAuthn{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"password_authns\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, passwordAuthnObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlb: unable to select from password_authns")
	}

	if err = passwordAuthnObj.doAfterSelectHooks(ctx, exec); err != nil {
		return passwordAuthnObj, err
	}

	return passwordAuthnObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PasswordAuthn) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlb: no password_authns provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(passwordAuthnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	passwordAuthnInsertCacheMut.RLock()
	cache, cached := passwordAuthnInsertCache[key]
	passwordAuthnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			passwordAuthnAllColumns,
			passwordAuthnColumnsWithDefault,
			passwordAuthnColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(passwordAuthnType, passwordAuthnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(passwordAuthnType, passwordAuthnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"password_authns\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"password_authns\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlb: unable to insert into password_authns")
	}

	if !cached {
		passwordAuthnInsertCacheMut.Lock()
		passwordAuthnInsertCache[key] = cache
		passwordAuthnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PasswordAuthn.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PasswordAuthn) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	passwordAuthnUpdateCacheMut.RLock()
	cache, cached := passwordAuthnUpdateCache[key]
	passwordAuthnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			passwordAuthnAllColumns,
			passwordAuthnPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlb: unable to update password_authns, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"password_authns\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, passwordAuthnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(passwordAuthnType, passwordAuthnMapping, append(wl, passwordAuthnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update password_authns row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by update for password_authns")
	}

	if !cached {
		passwordAuthnUpdateCacheMut.Lock()
		passwordAuthnUpdateCache[key] = cache
		passwordAuthnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q passwordAuthnQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update all for password_authns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to retrieve rows affected for password_authns")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PasswordAuthnSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), passwordAuthnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"password_authns\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, passwordAuthnPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update all in passwordAuthn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to retrieve rows affected all in update all passwordAuthn")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PasswordAuthn) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sqlb: no password_authns provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(passwordAuthnColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	passwordAuthnUpsertCacheMut.RLock()
	cache, cached := passwordAuthnUpsertCache[key]
	passwordAuthnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			passwordAuthnAllColumns,
			passwordAuthnColumnsWithDefault,
			passwordAuthnColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			passwordAuthnAllColumns,
			passwordAuthnPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlb: unable to upsert password_authns, could not build update column list")
		}

		ret := strmangle.SetComplement(passwordAuthnAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(passwordAuthnPrimaryKeyColumns) == 0 {
				return errors.New("sqlb: unable to upsert password_authns, could not build conflict column list")
			}

			conflict = make([]string, len(passwordAuthnPrimaryKeyColumns))
			copy(conflict, passwordAuthnPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"password_authns\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(passwordAuthnType, passwordAuthnMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(passwordAuthnType, passwordAuthnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlb: unable to upsert password_authns")
	}

	if !cached {
		passwordAuthnUpsertCacheMut.Lock()
		passwordAuthnUpsertCache[key] = cache
		passwordAuthnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PasswordAuthn record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PasswordAuthn) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlb: no PasswordAuthn provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), passwordAuthnPrimaryKeyMapping)
	sql := "DELETE FROM \"password_authns\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete from password_authns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by delete for password_authns")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q passwordAuthnQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlb: no passwordAuthnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete all from password_authns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by deleteall for password_authns")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PasswordAuthnSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(passwordAuthnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), passwordAuthnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"password_authns\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, passwordAuthnPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete all from passwordAuthn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by deleteall for password_authns")
	}

	if len(passwordAuthnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PasswordAuthn) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPasswordAuthn(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PasswordAuthnSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PasswordAuthnSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), passwordAuthnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"password_authns\".* FROM \"password_authns\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, passwordAuthnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlb: unable to reload all in PasswordAuthnSlice")
	}

	*o = slice

	return nil
}

// PasswordAuthnExists checks if the PasswordAuthn row exists.
func PasswordAuthnExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"password_authns\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlb: unable to check if password_authns exists")
	}

	return exists, nil
}

// Exists checks if the PasswordAuthn row exists.
func (o *PasswordAuthn) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PasswordAuthnExists(ctx, exec, o.ID)
}
