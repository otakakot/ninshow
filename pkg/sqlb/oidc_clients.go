// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OidcClient is an object representing the database table.
type OidcClient struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	RedirectURI string    `boil:"redirect_uri" json:"redirect_uri" toml:"redirect_uri" yaml:"redirect_uri"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Deleted     bool      `boil:"deleted" json:"deleted" toml:"deleted" yaml:"deleted"`

	R *oidcClientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oidcClientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OidcClientColumns = struct {
	ID          string
	Name        string
	RedirectURI string
	CreatedAt   string
	UpdatedAt   string
	Deleted     string
}{
	ID:          "id",
	Name:        "name",
	RedirectURI: "redirect_uri",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Deleted:     "deleted",
}

var OidcClientTableColumns = struct {
	ID          string
	Name        string
	RedirectURI string
	CreatedAt   string
	UpdatedAt   string
	Deleted     string
}{
	ID:          "oidc_clients.id",
	Name:        "oidc_clients.name",
	RedirectURI: "oidc_clients.redirect_uri",
	CreatedAt:   "oidc_clients.created_at",
	UpdatedAt:   "oidc_clients.updated_at",
	Deleted:     "oidc_clients.deleted",
}

// Generated where

var OidcClientWhere = struct {
	ID          whereHelperstring
	Name        whereHelperstring
	RedirectURI whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	Deleted     whereHelperbool
}{
	ID:          whereHelperstring{field: "\"oidc_clients\".\"id\""},
	Name:        whereHelperstring{field: "\"oidc_clients\".\"name\""},
	RedirectURI: whereHelperstring{field: "\"oidc_clients\".\"redirect_uri\""},
	CreatedAt:   whereHelpertime_Time{field: "\"oidc_clients\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"oidc_clients\".\"updated_at\""},
	Deleted:     whereHelperbool{field: "\"oidc_clients\".\"deleted\""},
}

// OidcClientRels is where relationship names are stored.
var OidcClientRels = struct {
	ClientOidcSecret string
}{
	ClientOidcSecret: "ClientOidcSecret",
}

// oidcClientR is where relationships are stored.
type oidcClientR struct {
	ClientOidcSecret *OidcSecret `boil:"ClientOidcSecret" json:"ClientOidcSecret" toml:"ClientOidcSecret" yaml:"ClientOidcSecret"`
}

// NewStruct creates a new relationship struct
func (*oidcClientR) NewStruct() *oidcClientR {
	return &oidcClientR{}
}

func (r *oidcClientR) GetClientOidcSecret() *OidcSecret {
	if r == nil {
		return nil
	}
	return r.ClientOidcSecret
}

// oidcClientL is where Load methods for each relationship are stored.
type oidcClientL struct{}

var (
	oidcClientAllColumns            = []string{"id", "name", "redirect_uri", "created_at", "updated_at", "deleted"}
	oidcClientColumnsWithoutDefault = []string{}
	oidcClientColumnsWithDefault    = []string{"id", "name", "redirect_uri", "created_at", "updated_at", "deleted"}
	oidcClientPrimaryKeyColumns     = []string{"id"}
	oidcClientGeneratedColumns      = []string{}
)

type (
	// OidcClientSlice is an alias for a slice of pointers to OidcClient.
	// This should almost always be used instead of []OidcClient.
	OidcClientSlice []*OidcClient
	// OidcClientHook is the signature for custom OidcClient hook methods
	OidcClientHook func(context.Context, boil.ContextExecutor, *OidcClient) error

	oidcClientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oidcClientType                 = reflect.TypeOf(&OidcClient{})
	oidcClientMapping              = queries.MakeStructMapping(oidcClientType)
	oidcClientPrimaryKeyMapping, _ = queries.BindMapping(oidcClientType, oidcClientMapping, oidcClientPrimaryKeyColumns)
	oidcClientInsertCacheMut       sync.RWMutex
	oidcClientInsertCache          = make(map[string]insertCache)
	oidcClientUpdateCacheMut       sync.RWMutex
	oidcClientUpdateCache          = make(map[string]updateCache)
	oidcClientUpsertCacheMut       sync.RWMutex
	oidcClientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var oidcClientAfterSelectMu sync.Mutex
var oidcClientAfterSelectHooks []OidcClientHook

var oidcClientBeforeInsertMu sync.Mutex
var oidcClientBeforeInsertHooks []OidcClientHook
var oidcClientAfterInsertMu sync.Mutex
var oidcClientAfterInsertHooks []OidcClientHook

var oidcClientBeforeUpdateMu sync.Mutex
var oidcClientBeforeUpdateHooks []OidcClientHook
var oidcClientAfterUpdateMu sync.Mutex
var oidcClientAfterUpdateHooks []OidcClientHook

var oidcClientBeforeDeleteMu sync.Mutex
var oidcClientBeforeDeleteHooks []OidcClientHook
var oidcClientAfterDeleteMu sync.Mutex
var oidcClientAfterDeleteHooks []OidcClientHook

var oidcClientBeforeUpsertMu sync.Mutex
var oidcClientBeforeUpsertHooks []OidcClientHook
var oidcClientAfterUpsertMu sync.Mutex
var oidcClientAfterUpsertHooks []OidcClientHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OidcClient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcClientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OidcClient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcClientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OidcClient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcClientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OidcClient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcClientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OidcClient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcClientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OidcClient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcClientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OidcClient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcClientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OidcClient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcClientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OidcClient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcClientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOidcClientHook registers your hook function for all future operations.
func AddOidcClientHook(hookPoint boil.HookPoint, oidcClientHook OidcClientHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		oidcClientAfterSelectMu.Lock()
		oidcClientAfterSelectHooks = append(oidcClientAfterSelectHooks, oidcClientHook)
		oidcClientAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		oidcClientBeforeInsertMu.Lock()
		oidcClientBeforeInsertHooks = append(oidcClientBeforeInsertHooks, oidcClientHook)
		oidcClientBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		oidcClientAfterInsertMu.Lock()
		oidcClientAfterInsertHooks = append(oidcClientAfterInsertHooks, oidcClientHook)
		oidcClientAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		oidcClientBeforeUpdateMu.Lock()
		oidcClientBeforeUpdateHooks = append(oidcClientBeforeUpdateHooks, oidcClientHook)
		oidcClientBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		oidcClientAfterUpdateMu.Lock()
		oidcClientAfterUpdateHooks = append(oidcClientAfterUpdateHooks, oidcClientHook)
		oidcClientAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		oidcClientBeforeDeleteMu.Lock()
		oidcClientBeforeDeleteHooks = append(oidcClientBeforeDeleteHooks, oidcClientHook)
		oidcClientBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		oidcClientAfterDeleteMu.Lock()
		oidcClientAfterDeleteHooks = append(oidcClientAfterDeleteHooks, oidcClientHook)
		oidcClientAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		oidcClientBeforeUpsertMu.Lock()
		oidcClientBeforeUpsertHooks = append(oidcClientBeforeUpsertHooks, oidcClientHook)
		oidcClientBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		oidcClientAfterUpsertMu.Lock()
		oidcClientAfterUpsertHooks = append(oidcClientAfterUpsertHooks, oidcClientHook)
		oidcClientAfterUpsertMu.Unlock()
	}
}

// One returns a single oidcClient record from the query.
func (q oidcClientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OidcClient, error) {
	o := &OidcClient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlb: failed to execute a one query for oidc_clients")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OidcClient records from the query.
func (q oidcClientQuery) All(ctx context.Context, exec boil.ContextExecutor) (OidcClientSlice, error) {
	var o []*OidcClient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlb: failed to assign all query results to OidcClient slice")
	}

	if len(oidcClientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OidcClient records in the query.
func (q oidcClientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to count oidc_clients rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q oidcClientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlb: failed to check if oidc_clients exists")
	}

	return count > 0, nil
}

// ClientOidcSecret pointed to by the foreign key.
func (o *OidcClient) ClientOidcSecret(mods ...qm.QueryMod) oidcSecretQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"client_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return OidcSecrets(queryMods...)
}

// LoadClientOidcSecret allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (oidcClientL) LoadClientOidcSecret(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOidcClient interface{}, mods queries.Applicator) error {
	var slice []*OidcClient
	var object *OidcClient

	if singular {
		var ok bool
		object, ok = maybeOidcClient.(*OidcClient)
		if !ok {
			object = new(OidcClient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOidcClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOidcClient))
			}
		}
	} else {
		s, ok := maybeOidcClient.(*[]*OidcClient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOidcClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOidcClient))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &oidcClientR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &oidcClientR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`oidc_secrets`),
		qm.WhereIn(`oidc_secrets.client_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OidcSecret")
	}

	var resultSlice []*OidcSecret
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OidcSecret")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for oidc_secrets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for oidc_secrets")
	}

	if len(oidcSecretAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClientOidcSecret = foreign
		if foreign.R == nil {
			foreign.R = &oidcSecretR{}
		}
		foreign.R.Client = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ClientID {
				local.R.ClientOidcSecret = foreign
				if foreign.R == nil {
					foreign.R = &oidcSecretR{}
				}
				foreign.R.Client = local
				break
			}
		}
	}

	return nil
}

// SetClientOidcSecret of the oidcClient to the related item.
// Sets o.R.ClientOidcSecret to related.
// Adds o to related.R.Client.
func (o *OidcClient) SetClientOidcSecret(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OidcSecret) error {
	var err error

	if insert {
		related.ClientID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"oidc_secrets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"client_id"}),
			strmangle.WhereClause("\"", "\"", 2, oidcSecretPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ClientID = o.ID
	}

	if o.R == nil {
		o.R = &oidcClientR{
			ClientOidcSecret: related,
		}
	} else {
		o.R.ClientOidcSecret = related
	}

	if related.R == nil {
		related.R = &oidcSecretR{
			Client: o,
		}
	} else {
		related.R.Client = o
	}
	return nil
}

// OidcClients retrieves all the records using an executor.
func OidcClients(mods ...qm.QueryMod) oidcClientQuery {
	mods = append(mods, qm.From("\"oidc_clients\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"oidc_clients\".*"})
	}

	return oidcClientQuery{q}
}

// FindOidcClient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOidcClient(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OidcClient, error) {
	oidcClientObj := &OidcClient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"oidc_clients\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, oidcClientObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlb: unable to select from oidc_clients")
	}

	if err = oidcClientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return oidcClientObj, err
	}

	return oidcClientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OidcClient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlb: no oidc_clients provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oidcClientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	oidcClientInsertCacheMut.RLock()
	cache, cached := oidcClientInsertCache[key]
	oidcClientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			oidcClientAllColumns,
			oidcClientColumnsWithDefault,
			oidcClientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(oidcClientType, oidcClientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oidcClientType, oidcClientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"oidc_clients\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"oidc_clients\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlb: unable to insert into oidc_clients")
	}

	if !cached {
		oidcClientInsertCacheMut.Lock()
		oidcClientInsertCache[key] = cache
		oidcClientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OidcClient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OidcClient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	oidcClientUpdateCacheMut.RLock()
	cache, cached := oidcClientUpdateCache[key]
	oidcClientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			oidcClientAllColumns,
			oidcClientPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlb: unable to update oidc_clients, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"oidc_clients\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, oidcClientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oidcClientType, oidcClientMapping, append(wl, oidcClientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update oidc_clients row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by update for oidc_clients")
	}

	if !cached {
		oidcClientUpdateCacheMut.Lock()
		oidcClientUpdateCache[key] = cache
		oidcClientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q oidcClientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update all for oidc_clients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to retrieve rows affected for oidc_clients")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OidcClientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"oidc_clients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, oidcClientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update all in oidcClient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to retrieve rows affected all in update all oidcClient")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OidcClient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sqlb: no oidc_clients provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oidcClientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oidcClientUpsertCacheMut.RLock()
	cache, cached := oidcClientUpsertCache[key]
	oidcClientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			oidcClientAllColumns,
			oidcClientColumnsWithDefault,
			oidcClientColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			oidcClientAllColumns,
			oidcClientPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlb: unable to upsert oidc_clients, could not build update column list")
		}

		ret := strmangle.SetComplement(oidcClientAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(oidcClientPrimaryKeyColumns) == 0 {
				return errors.New("sqlb: unable to upsert oidc_clients, could not build conflict column list")
			}

			conflict = make([]string, len(oidcClientPrimaryKeyColumns))
			copy(conflict, oidcClientPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"oidc_clients\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(oidcClientType, oidcClientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oidcClientType, oidcClientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlb: unable to upsert oidc_clients")
	}

	if !cached {
		oidcClientUpsertCacheMut.Lock()
		oidcClientUpsertCache[key] = cache
		oidcClientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OidcClient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OidcClient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlb: no OidcClient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oidcClientPrimaryKeyMapping)
	sql := "DELETE FROM \"oidc_clients\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete from oidc_clients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by delete for oidc_clients")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q oidcClientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlb: no oidcClientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete all from oidc_clients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by deleteall for oidc_clients")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OidcClientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(oidcClientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"oidc_clients\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oidcClientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete all from oidcClient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by deleteall for oidc_clients")
	}

	if len(oidcClientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OidcClient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOidcClient(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OidcClientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OidcClientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"oidc_clients\".* FROM \"oidc_clients\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oidcClientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlb: unable to reload all in OidcClientSlice")
	}

	*o = slice

	return nil
}

// OidcClientExists checks if the OidcClient row exists.
func OidcClientExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"oidc_clients\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlb: unable to check if oidc_clients exists")
	}

	return exists, nil
}

// Exists checks if the OidcClient row exists.
func (o *OidcClient) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OidcClientExists(ctx, exec, o.ID)
}
