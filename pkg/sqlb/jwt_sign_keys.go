// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// JWTSignKey is an object representing the database table.
type JWTSignKey struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Key       []byte    `boil:"key" json:"key" toml:"key" yaml:"key"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *jwtSignKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jwtSignKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JWTSignKeyColumns = struct {
	ID        string
	Key       string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Key:       "key",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var JWTSignKeyTableColumns = struct {
	ID        string
	Key       string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "jwt_sign_keys.id",
	Key:       "jwt_sign_keys.key",
	CreatedAt: "jwt_sign_keys.created_at",
	UpdatedAt: "jwt_sign_keys.updated_at",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var JWTSignKeyWhere = struct {
	ID        whereHelperstring
	Key       whereHelper__byte
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"jwt_sign_keys\".\"id\""},
	Key:       whereHelper__byte{field: "\"jwt_sign_keys\".\"key\""},
	CreatedAt: whereHelpertime_Time{field: "\"jwt_sign_keys\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"jwt_sign_keys\".\"updated_at\""},
}

// JWTSignKeyRels is where relationship names are stored.
var JWTSignKeyRels = struct {
}{}

// jwtSignKeyR is where relationships are stored.
type jwtSignKeyR struct {
}

// NewStruct creates a new relationship struct
func (*jwtSignKeyR) NewStruct() *jwtSignKeyR {
	return &jwtSignKeyR{}
}

// jwtSignKeyL is where Load methods for each relationship are stored.
type jwtSignKeyL struct{}

var (
	jwtSignKeyAllColumns            = []string{"id", "key", "created_at", "updated_at"}
	jwtSignKeyColumnsWithoutDefault = []string{"key"}
	jwtSignKeyColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	jwtSignKeyPrimaryKeyColumns     = []string{"id"}
	jwtSignKeyGeneratedColumns      = []string{}
)

type (
	// JWTSignKeySlice is an alias for a slice of pointers to JWTSignKey.
	// This should almost always be used instead of []JWTSignKey.
	JWTSignKeySlice []*JWTSignKey
	// JWTSignKeyHook is the signature for custom JWTSignKey hook methods
	JWTSignKeyHook func(context.Context, boil.ContextExecutor, *JWTSignKey) error

	jwtSignKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jwtSignKeyType                 = reflect.TypeOf(&JWTSignKey{})
	jwtSignKeyMapping              = queries.MakeStructMapping(jwtSignKeyType)
	jwtSignKeyPrimaryKeyMapping, _ = queries.BindMapping(jwtSignKeyType, jwtSignKeyMapping, jwtSignKeyPrimaryKeyColumns)
	jwtSignKeyInsertCacheMut       sync.RWMutex
	jwtSignKeyInsertCache          = make(map[string]insertCache)
	jwtSignKeyUpdateCacheMut       sync.RWMutex
	jwtSignKeyUpdateCache          = make(map[string]updateCache)
	jwtSignKeyUpsertCacheMut       sync.RWMutex
	jwtSignKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jwtSignKeyAfterSelectMu sync.Mutex
var jwtSignKeyAfterSelectHooks []JWTSignKeyHook

var jwtSignKeyBeforeInsertMu sync.Mutex
var jwtSignKeyBeforeInsertHooks []JWTSignKeyHook
var jwtSignKeyAfterInsertMu sync.Mutex
var jwtSignKeyAfterInsertHooks []JWTSignKeyHook

var jwtSignKeyBeforeUpdateMu sync.Mutex
var jwtSignKeyBeforeUpdateHooks []JWTSignKeyHook
var jwtSignKeyAfterUpdateMu sync.Mutex
var jwtSignKeyAfterUpdateHooks []JWTSignKeyHook

var jwtSignKeyBeforeDeleteMu sync.Mutex
var jwtSignKeyBeforeDeleteHooks []JWTSignKeyHook
var jwtSignKeyAfterDeleteMu sync.Mutex
var jwtSignKeyAfterDeleteHooks []JWTSignKeyHook

var jwtSignKeyBeforeUpsertMu sync.Mutex
var jwtSignKeyBeforeUpsertHooks []JWTSignKeyHook
var jwtSignKeyAfterUpsertMu sync.Mutex
var jwtSignKeyAfterUpsertHooks []JWTSignKeyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JWTSignKey) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtSignKeyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JWTSignKey) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtSignKeyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JWTSignKey) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtSignKeyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JWTSignKey) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtSignKeyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JWTSignKey) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtSignKeyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JWTSignKey) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtSignKeyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JWTSignKey) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtSignKeyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JWTSignKey) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtSignKeyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JWTSignKey) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jwtSignKeyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJWTSignKeyHook registers your hook function for all future operations.
func AddJWTSignKeyHook(hookPoint boil.HookPoint, jwtSignKeyHook JWTSignKeyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		jwtSignKeyAfterSelectMu.Lock()
		jwtSignKeyAfterSelectHooks = append(jwtSignKeyAfterSelectHooks, jwtSignKeyHook)
		jwtSignKeyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		jwtSignKeyBeforeInsertMu.Lock()
		jwtSignKeyBeforeInsertHooks = append(jwtSignKeyBeforeInsertHooks, jwtSignKeyHook)
		jwtSignKeyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		jwtSignKeyAfterInsertMu.Lock()
		jwtSignKeyAfterInsertHooks = append(jwtSignKeyAfterInsertHooks, jwtSignKeyHook)
		jwtSignKeyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		jwtSignKeyBeforeUpdateMu.Lock()
		jwtSignKeyBeforeUpdateHooks = append(jwtSignKeyBeforeUpdateHooks, jwtSignKeyHook)
		jwtSignKeyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		jwtSignKeyAfterUpdateMu.Lock()
		jwtSignKeyAfterUpdateHooks = append(jwtSignKeyAfterUpdateHooks, jwtSignKeyHook)
		jwtSignKeyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		jwtSignKeyBeforeDeleteMu.Lock()
		jwtSignKeyBeforeDeleteHooks = append(jwtSignKeyBeforeDeleteHooks, jwtSignKeyHook)
		jwtSignKeyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		jwtSignKeyAfterDeleteMu.Lock()
		jwtSignKeyAfterDeleteHooks = append(jwtSignKeyAfterDeleteHooks, jwtSignKeyHook)
		jwtSignKeyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		jwtSignKeyBeforeUpsertMu.Lock()
		jwtSignKeyBeforeUpsertHooks = append(jwtSignKeyBeforeUpsertHooks, jwtSignKeyHook)
		jwtSignKeyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		jwtSignKeyAfterUpsertMu.Lock()
		jwtSignKeyAfterUpsertHooks = append(jwtSignKeyAfterUpsertHooks, jwtSignKeyHook)
		jwtSignKeyAfterUpsertMu.Unlock()
	}
}

// One returns a single jwtSignKey record from the query.
func (q jwtSignKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JWTSignKey, error) {
	o := &JWTSignKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlb: failed to execute a one query for jwt_sign_keys")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all JWTSignKey records from the query.
func (q jwtSignKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (JWTSignKeySlice, error) {
	var o []*JWTSignKey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlb: failed to assign all query results to JWTSignKey slice")
	}

	if len(jwtSignKeyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all JWTSignKey records in the query.
func (q jwtSignKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to count jwt_sign_keys rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q jwtSignKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlb: failed to check if jwt_sign_keys exists")
	}

	return count > 0, nil
}

// JWTSignKeys retrieves all the records using an executor.
func JWTSignKeys(mods ...qm.QueryMod) jwtSignKeyQuery {
	mods = append(mods, qm.From("\"jwt_sign_keys\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"jwt_sign_keys\".*"})
	}

	return jwtSignKeyQuery{q}
}

// FindJWTSignKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJWTSignKey(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*JWTSignKey, error) {
	jwtSignKeyObj := &JWTSignKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"jwt_sign_keys\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jwtSignKeyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlb: unable to select from jwt_sign_keys")
	}

	if err = jwtSignKeyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return jwtSignKeyObj, err
	}

	return jwtSignKeyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JWTSignKey) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlb: no jwt_sign_keys provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jwtSignKeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jwtSignKeyInsertCacheMut.RLock()
	cache, cached := jwtSignKeyInsertCache[key]
	jwtSignKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jwtSignKeyAllColumns,
			jwtSignKeyColumnsWithDefault,
			jwtSignKeyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jwtSignKeyType, jwtSignKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jwtSignKeyType, jwtSignKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"jwt_sign_keys\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"jwt_sign_keys\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlb: unable to insert into jwt_sign_keys")
	}

	if !cached {
		jwtSignKeyInsertCacheMut.Lock()
		jwtSignKeyInsertCache[key] = cache
		jwtSignKeyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the JWTSignKey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JWTSignKey) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jwtSignKeyUpdateCacheMut.RLock()
	cache, cached := jwtSignKeyUpdateCache[key]
	jwtSignKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jwtSignKeyAllColumns,
			jwtSignKeyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlb: unable to update jwt_sign_keys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"jwt_sign_keys\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jwtSignKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jwtSignKeyType, jwtSignKeyMapping, append(wl, jwtSignKeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update jwt_sign_keys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by update for jwt_sign_keys")
	}

	if !cached {
		jwtSignKeyUpdateCacheMut.Lock()
		jwtSignKeyUpdateCache[key] = cache
		jwtSignKeyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q jwtSignKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update all for jwt_sign_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to retrieve rows affected for jwt_sign_keys")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JWTSignKeySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jwtSignKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"jwt_sign_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jwtSignKeyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update all in jwtSignKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to retrieve rows affected all in update all jwtSignKey")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JWTSignKey) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sqlb: no jwt_sign_keys provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jwtSignKeyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jwtSignKeyUpsertCacheMut.RLock()
	cache, cached := jwtSignKeyUpsertCache[key]
	jwtSignKeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			jwtSignKeyAllColumns,
			jwtSignKeyColumnsWithDefault,
			jwtSignKeyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			jwtSignKeyAllColumns,
			jwtSignKeyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlb: unable to upsert jwt_sign_keys, could not build update column list")
		}

		ret := strmangle.SetComplement(jwtSignKeyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(jwtSignKeyPrimaryKeyColumns) == 0 {
				return errors.New("sqlb: unable to upsert jwt_sign_keys, could not build conflict column list")
			}

			conflict = make([]string, len(jwtSignKeyPrimaryKeyColumns))
			copy(conflict, jwtSignKeyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"jwt_sign_keys\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(jwtSignKeyType, jwtSignKeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jwtSignKeyType, jwtSignKeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlb: unable to upsert jwt_sign_keys")
	}

	if !cached {
		jwtSignKeyUpsertCacheMut.Lock()
		jwtSignKeyUpsertCache[key] = cache
		jwtSignKeyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single JWTSignKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JWTSignKey) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlb: no JWTSignKey provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jwtSignKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"jwt_sign_keys\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete from jwt_sign_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by delete for jwt_sign_keys")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q jwtSignKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlb: no jwtSignKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete all from jwt_sign_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by deleteall for jwt_sign_keys")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JWTSignKeySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jwtSignKeyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jwtSignKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"jwt_sign_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jwtSignKeyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete all from jwtSignKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by deleteall for jwt_sign_keys")
	}

	if len(jwtSignKeyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JWTSignKey) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJWTSignKey(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JWTSignKeySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JWTSignKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jwtSignKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"jwt_sign_keys\".* FROM \"jwt_sign_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jwtSignKeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlb: unable to reload all in JWTSignKeySlice")
	}

	*o = slice

	return nil
}

// JWTSignKeyExists checks if the JWTSignKey row exists.
func JWTSignKeyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"jwt_sign_keys\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlb: unable to check if jwt_sign_keys exists")
	}

	return exists, nil
}

// Exists checks if the JWTSignKey row exists.
func (o *JWTSignKey) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return JWTSignKeyExists(ctx, exec, o.ID)
}
