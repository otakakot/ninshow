// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OidcSecret is an object representing the database table.
type OidcSecret struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Value     []byte    `boil:"value" json:"value" toml:"value" yaml:"value"`
	ClientID  string    `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`

	R *oidcSecretR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oidcSecretL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OidcSecretColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Value     string
	ClientID  string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Value:     "value",
	ClientID:  "client_id",
}

var OidcSecretTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Value     string
	ClientID  string
}{
	ID:        "oidc_secrets.id",
	CreatedAt: "oidc_secrets.created_at",
	UpdatedAt: "oidc_secrets.updated_at",
	Value:     "oidc_secrets.value",
	ClientID:  "oidc_secrets.client_id",
}

// Generated where

var OidcSecretWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Value     whereHelper__byte
	ClientID  whereHelperstring
}{
	ID:        whereHelperstring{field: "\"oidc_secrets\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"oidc_secrets\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"oidc_secrets\".\"updated_at\""},
	Value:     whereHelper__byte{field: "\"oidc_secrets\".\"value\""},
	ClientID:  whereHelperstring{field: "\"oidc_secrets\".\"client_id\""},
}

// OidcSecretRels is where relationship names are stored.
var OidcSecretRels = struct {
	Client string
}{
	Client: "Client",
}

// oidcSecretR is where relationships are stored.
type oidcSecretR struct {
	Client *OidcClient `boil:"Client" json:"Client" toml:"Client" yaml:"Client"`
}

// NewStruct creates a new relationship struct
func (*oidcSecretR) NewStruct() *oidcSecretR {
	return &oidcSecretR{}
}

func (r *oidcSecretR) GetClient() *OidcClient {
	if r == nil {
		return nil
	}
	return r.Client
}

// oidcSecretL is where Load methods for each relationship are stored.
type oidcSecretL struct{}

var (
	oidcSecretAllColumns            = []string{"id", "created_at", "updated_at", "value", "client_id"}
	oidcSecretColumnsWithoutDefault = []string{"value", "client_id"}
	oidcSecretColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	oidcSecretPrimaryKeyColumns     = []string{"id"}
	oidcSecretGeneratedColumns      = []string{}
)

type (
	// OidcSecretSlice is an alias for a slice of pointers to OidcSecret.
	// This should almost always be used instead of []OidcSecret.
	OidcSecretSlice []*OidcSecret
	// OidcSecretHook is the signature for custom OidcSecret hook methods
	OidcSecretHook func(context.Context, boil.ContextExecutor, *OidcSecret) error

	oidcSecretQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oidcSecretType                 = reflect.TypeOf(&OidcSecret{})
	oidcSecretMapping              = queries.MakeStructMapping(oidcSecretType)
	oidcSecretPrimaryKeyMapping, _ = queries.BindMapping(oidcSecretType, oidcSecretMapping, oidcSecretPrimaryKeyColumns)
	oidcSecretInsertCacheMut       sync.RWMutex
	oidcSecretInsertCache          = make(map[string]insertCache)
	oidcSecretUpdateCacheMut       sync.RWMutex
	oidcSecretUpdateCache          = make(map[string]updateCache)
	oidcSecretUpsertCacheMut       sync.RWMutex
	oidcSecretUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var oidcSecretAfterSelectMu sync.Mutex
var oidcSecretAfterSelectHooks []OidcSecretHook

var oidcSecretBeforeInsertMu sync.Mutex
var oidcSecretBeforeInsertHooks []OidcSecretHook
var oidcSecretAfterInsertMu sync.Mutex
var oidcSecretAfterInsertHooks []OidcSecretHook

var oidcSecretBeforeUpdateMu sync.Mutex
var oidcSecretBeforeUpdateHooks []OidcSecretHook
var oidcSecretAfterUpdateMu sync.Mutex
var oidcSecretAfterUpdateHooks []OidcSecretHook

var oidcSecretBeforeDeleteMu sync.Mutex
var oidcSecretBeforeDeleteHooks []OidcSecretHook
var oidcSecretAfterDeleteMu sync.Mutex
var oidcSecretAfterDeleteHooks []OidcSecretHook

var oidcSecretBeforeUpsertMu sync.Mutex
var oidcSecretBeforeUpsertHooks []OidcSecretHook
var oidcSecretAfterUpsertMu sync.Mutex
var oidcSecretAfterUpsertHooks []OidcSecretHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OidcSecret) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcSecretAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OidcSecret) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcSecretBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OidcSecret) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcSecretAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OidcSecret) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcSecretBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OidcSecret) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcSecretAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OidcSecret) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcSecretBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OidcSecret) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcSecretAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OidcSecret) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcSecretBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OidcSecret) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oidcSecretAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOidcSecretHook registers your hook function for all future operations.
func AddOidcSecretHook(hookPoint boil.HookPoint, oidcSecretHook OidcSecretHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		oidcSecretAfterSelectMu.Lock()
		oidcSecretAfterSelectHooks = append(oidcSecretAfterSelectHooks, oidcSecretHook)
		oidcSecretAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		oidcSecretBeforeInsertMu.Lock()
		oidcSecretBeforeInsertHooks = append(oidcSecretBeforeInsertHooks, oidcSecretHook)
		oidcSecretBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		oidcSecretAfterInsertMu.Lock()
		oidcSecretAfterInsertHooks = append(oidcSecretAfterInsertHooks, oidcSecretHook)
		oidcSecretAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		oidcSecretBeforeUpdateMu.Lock()
		oidcSecretBeforeUpdateHooks = append(oidcSecretBeforeUpdateHooks, oidcSecretHook)
		oidcSecretBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		oidcSecretAfterUpdateMu.Lock()
		oidcSecretAfterUpdateHooks = append(oidcSecretAfterUpdateHooks, oidcSecretHook)
		oidcSecretAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		oidcSecretBeforeDeleteMu.Lock()
		oidcSecretBeforeDeleteHooks = append(oidcSecretBeforeDeleteHooks, oidcSecretHook)
		oidcSecretBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		oidcSecretAfterDeleteMu.Lock()
		oidcSecretAfterDeleteHooks = append(oidcSecretAfterDeleteHooks, oidcSecretHook)
		oidcSecretAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		oidcSecretBeforeUpsertMu.Lock()
		oidcSecretBeforeUpsertHooks = append(oidcSecretBeforeUpsertHooks, oidcSecretHook)
		oidcSecretBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		oidcSecretAfterUpsertMu.Lock()
		oidcSecretAfterUpsertHooks = append(oidcSecretAfterUpsertHooks, oidcSecretHook)
		oidcSecretAfterUpsertMu.Unlock()
	}
}

// One returns a single oidcSecret record from the query.
func (q oidcSecretQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OidcSecret, error) {
	o := &OidcSecret{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlb: failed to execute a one query for oidc_secrets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OidcSecret records from the query.
func (q oidcSecretQuery) All(ctx context.Context, exec boil.ContextExecutor) (OidcSecretSlice, error) {
	var o []*OidcSecret

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlb: failed to assign all query results to OidcSecret slice")
	}

	if len(oidcSecretAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OidcSecret records in the query.
func (q oidcSecretQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to count oidc_secrets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q oidcSecretQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlb: failed to check if oidc_secrets exists")
	}

	return count > 0, nil
}

// Client pointed to by the foreign key.
func (o *OidcSecret) Client(mods ...qm.QueryMod) oidcClientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ClientID),
	}

	queryMods = append(queryMods, mods...)

	return OidcClients(queryMods...)
}

// LoadClient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (oidcSecretL) LoadClient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOidcSecret interface{}, mods queries.Applicator) error {
	var slice []*OidcSecret
	var object *OidcSecret

	if singular {
		var ok bool
		object, ok = maybeOidcSecret.(*OidcSecret)
		if !ok {
			object = new(OidcSecret)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOidcSecret)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOidcSecret))
			}
		}
	} else {
		s, ok := maybeOidcSecret.(*[]*OidcSecret)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOidcSecret)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOidcSecret))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &oidcSecretR{}
		}
		args[object.ClientID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &oidcSecretR{}
			}

			args[obj.ClientID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`oidc_clients`),
		qm.WhereIn(`oidc_clients.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OidcClient")
	}

	var resultSlice []*OidcClient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OidcClient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for oidc_clients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for oidc_clients")
	}

	if len(oidcClientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Client = foreign
		if foreign.R == nil {
			foreign.R = &oidcClientR{}
		}
		foreign.R.ClientOidcSecret = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClientID == foreign.ID {
				local.R.Client = foreign
				if foreign.R == nil {
					foreign.R = &oidcClientR{}
				}
				foreign.R.ClientOidcSecret = local
				break
			}
		}
	}

	return nil
}

// SetClient of the oidcSecret to the related item.
// Sets o.R.Client to related.
// Adds o to related.R.ClientOidcSecret.
func (o *OidcSecret) SetClient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OidcClient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"oidc_secrets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"client_id"}),
		strmangle.WhereClause("\"", "\"", 2, oidcSecretPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClientID = related.ID
	if o.R == nil {
		o.R = &oidcSecretR{
			Client: related,
		}
	} else {
		o.R.Client = related
	}

	if related.R == nil {
		related.R = &oidcClientR{
			ClientOidcSecret: o,
		}
	} else {
		related.R.ClientOidcSecret = o
	}

	return nil
}

// OidcSecrets retrieves all the records using an executor.
func OidcSecrets(mods ...qm.QueryMod) oidcSecretQuery {
	mods = append(mods, qm.From("\"oidc_secrets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"oidc_secrets\".*"})
	}

	return oidcSecretQuery{q}
}

// FindOidcSecret retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOidcSecret(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OidcSecret, error) {
	oidcSecretObj := &OidcSecret{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"oidc_secrets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, oidcSecretObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlb: unable to select from oidc_secrets")
	}

	if err = oidcSecretObj.doAfterSelectHooks(ctx, exec); err != nil {
		return oidcSecretObj, err
	}

	return oidcSecretObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OidcSecret) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlb: no oidc_secrets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oidcSecretColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	oidcSecretInsertCacheMut.RLock()
	cache, cached := oidcSecretInsertCache[key]
	oidcSecretInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			oidcSecretAllColumns,
			oidcSecretColumnsWithDefault,
			oidcSecretColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(oidcSecretType, oidcSecretMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oidcSecretType, oidcSecretMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"oidc_secrets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"oidc_secrets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlb: unable to insert into oidc_secrets")
	}

	if !cached {
		oidcSecretInsertCacheMut.Lock()
		oidcSecretInsertCache[key] = cache
		oidcSecretInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OidcSecret.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OidcSecret) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	oidcSecretUpdateCacheMut.RLock()
	cache, cached := oidcSecretUpdateCache[key]
	oidcSecretUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			oidcSecretAllColumns,
			oidcSecretPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlb: unable to update oidc_secrets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"oidc_secrets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, oidcSecretPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oidcSecretType, oidcSecretMapping, append(wl, oidcSecretPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update oidc_secrets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by update for oidc_secrets")
	}

	if !cached {
		oidcSecretUpdateCacheMut.Lock()
		oidcSecretUpdateCache[key] = cache
		oidcSecretUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q oidcSecretQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update all for oidc_secrets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to retrieve rows affected for oidc_secrets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OidcSecretSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"oidc_secrets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, oidcSecretPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to update all in oidcSecret slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to retrieve rows affected all in update all oidcSecret")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OidcSecret) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sqlb: no oidc_secrets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oidcSecretColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oidcSecretUpsertCacheMut.RLock()
	cache, cached := oidcSecretUpsertCache[key]
	oidcSecretUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			oidcSecretAllColumns,
			oidcSecretColumnsWithDefault,
			oidcSecretColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			oidcSecretAllColumns,
			oidcSecretPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlb: unable to upsert oidc_secrets, could not build update column list")
		}

		ret := strmangle.SetComplement(oidcSecretAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(oidcSecretPrimaryKeyColumns) == 0 {
				return errors.New("sqlb: unable to upsert oidc_secrets, could not build conflict column list")
			}

			conflict = make([]string, len(oidcSecretPrimaryKeyColumns))
			copy(conflict, oidcSecretPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"oidc_secrets\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(oidcSecretType, oidcSecretMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oidcSecretType, oidcSecretMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlb: unable to upsert oidc_secrets")
	}

	if !cached {
		oidcSecretUpsertCacheMut.Lock()
		oidcSecretUpsertCache[key] = cache
		oidcSecretUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OidcSecret record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OidcSecret) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlb: no OidcSecret provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oidcSecretPrimaryKeyMapping)
	sql := "DELETE FROM \"oidc_secrets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete from oidc_secrets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by delete for oidc_secrets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q oidcSecretQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlb: no oidcSecretQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete all from oidc_secrets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by deleteall for oidc_secrets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OidcSecretSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(oidcSecretBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"oidc_secrets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oidcSecretPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: unable to delete all from oidcSecret slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlb: failed to get rows affected by deleteall for oidc_secrets")
	}

	if len(oidcSecretAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OidcSecret) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOidcSecret(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OidcSecretSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OidcSecretSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oidcSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"oidc_secrets\".* FROM \"oidc_secrets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oidcSecretPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlb: unable to reload all in OidcSecretSlice")
	}

	*o = slice

	return nil
}

// OidcSecretExists checks if the OidcSecret row exists.
func OidcSecretExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"oidc_secrets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlb: unable to check if oidc_secrets exists")
	}

	return exists, nil
}

// Exists checks if the OidcSecret row exists.
func (o *OidcSecret) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OidcSecretExists(ctx, exec, o.ID)
}
