// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/url"

	"github.com/go-faster/errors"
)

type Bearer struct {
	Token string
}

// GetToken returns the value of Token.
func (s *Bearer) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *Bearer) SetToken(val string) {
	s.Token = val
}

// HealthInternalServerError is response for Health operation.
type HealthInternalServerError struct{}

func (*HealthInternalServerError) healthRes() {}

// HealthOK is response for Health operation.
type HealthOK struct{}

func (*HealthOK) healthRes() {}

// Ref: #/components/schemas/IdPSigninRequestSchema
type IdPSigninRequestSchema struct {
	// Email.
	Email string `json:"email"`
	// Password.
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *IdPSigninRequestSchema) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *IdPSigninRequestSchema) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *IdPSigninRequestSchema) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *IdPSigninRequestSchema) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/IdPSignupRequestSchema
type IdPSignupRequestSchema struct {
	// Name.
	Name string `json:"name"`
	// Email.
	Email string `json:"email"`
	// Password.
	Password string `json:"password"`
}

// GetName returns the value of Name.
func (s *IdPSignupRequestSchema) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *IdPSignupRequestSchema) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *IdPSignupRequestSchema) GetPassword() string {
	return s.Password
}

// SetName sets the value of Name.
func (s *IdPSignupRequestSchema) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *IdPSignupRequestSchema) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *IdPSignupRequestSchema) SetPassword(val string) {
	s.Password = val
}

// IdpOIDCCallbackInternalServerError is response for IdpOIDCCallback operation.
type IdpOIDCCallbackInternalServerError struct{}

func (*IdpOIDCCallbackInternalServerError) idpOIDCCallbackRes() {}

type IdpOIDCCallbackOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s IdpOIDCCallbackOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*IdpOIDCCallbackOK) idpOIDCCallbackRes() {}

// IdpOIDCLoginBadRequest is response for IdpOIDCLogin operation.
type IdpOIDCLoginBadRequest struct{}

func (*IdpOIDCLoginBadRequest) idpOIDCLoginRes() {}

// IdpOIDCLoginFound is response for IdpOIDCLogin operation.
type IdpOIDCLoginFound struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *IdpOIDCLoginFound) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *IdpOIDCLoginFound) SetLocation(val OptURI) {
	s.Location = val
}

func (*IdpOIDCLoginFound) idpOIDCLoginRes() {}

// IdpOIDCLoginInternalServerError is response for IdpOIDCLogin operation.
type IdpOIDCLoginInternalServerError struct{}

func (*IdpOIDCLoginInternalServerError) idpOIDCLoginRes() {}

type IdpOIDCLoginOp string

const (
	IdpOIDCLoginOpZitadel IdpOIDCLoginOp = "zitadel"
)

// AllValues returns all IdpOIDCLoginOp values.
func (IdpOIDCLoginOp) AllValues() []IdpOIDCLoginOp {
	return []IdpOIDCLoginOp{
		IdpOIDCLoginOpZitadel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IdpOIDCLoginOp) MarshalText() ([]byte, error) {
	switch s {
	case IdpOIDCLoginOpZitadel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IdpOIDCLoginOp) UnmarshalText(data []byte) error {
	switch IdpOIDCLoginOp(data) {
	case IdpOIDCLoginOpZitadel:
		*s = IdpOIDCLoginOpZitadel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IdpSigninInternalServerError is response for IdpSignin operation.
type IdpSigninInternalServerError struct{}

func (*IdpSigninInternalServerError) idpSigninRes() {}

// IdpSigninOK is response for IdpSignin operation.
type IdpSigninOK struct{}

func (*IdpSigninOK) idpSigninRes() {}

// IdpSigninUnauthorized is response for IdpSignin operation.
type IdpSigninUnauthorized struct{}

func (*IdpSigninUnauthorized) idpSigninRes() {}

// IdpSignupInternalServerError is response for IdpSignup operation.
type IdpSignupInternalServerError struct{}

func (*IdpSignupInternalServerError) idpSignupRes() {}

// IdpSignupOK is response for IdpSignup operation.
type IdpSignupOK struct{}

func (*IdpSignupOK) idpSignupRes() {}

// Jwk set key.
// Ref: #/components/schemas/OPJWKSetKey
type OPJWKSetKey struct {
	// 鍵識別子.
	Kid string `json:"kid"`
	// RSAやEC等の暗号アルゴリズムファミリー.
	Kty string `json:"kty"`
	// 公開鍵の用途.
	Use string `json:"use"`
	// 署名検証アルゴリズム.
	Alg string `json:"alg"`
	// Modulus 公開鍵を復元するための公開鍵の絶対値.
	N string `json:"n"`
	// Exponent 公開鍵を復元するための指数値.
	E string `json:"e"`
}

// GetKid returns the value of Kid.
func (s *OPJWKSetKey) GetKid() string {
	return s.Kid
}

// GetKty returns the value of Kty.
func (s *OPJWKSetKey) GetKty() string {
	return s.Kty
}

// GetUse returns the value of Use.
func (s *OPJWKSetKey) GetUse() string {
	return s.Use
}

// GetAlg returns the value of Alg.
func (s *OPJWKSetKey) GetAlg() string {
	return s.Alg
}

// GetN returns the value of N.
func (s *OPJWKSetKey) GetN() string {
	return s.N
}

// GetE returns the value of E.
func (s *OPJWKSetKey) GetE() string {
	return s.E
}

// SetKid sets the value of Kid.
func (s *OPJWKSetKey) SetKid(val string) {
	s.Kid = val
}

// SetKty sets the value of Kty.
func (s *OPJWKSetKey) SetKty(val string) {
	s.Kty = val
}

// SetUse sets the value of Use.
func (s *OPJWKSetKey) SetUse(val string) {
	s.Use = val
}

// SetAlg sets the value of Alg.
func (s *OPJWKSetKey) SetAlg(val string) {
	s.Alg = val
}

// SetN sets the value of N.
func (s *OPJWKSetKey) SetN(val string) {
	s.N = val
}

// SetE sets the value of E.
func (s *OPJWKSetKey) SetE(val string) {
	s.E = val
}

// Https://openid-foundation-japan.github.io/rfc7517.ja.html#anchor5.
// Ref: #/components/schemas/OPJWKSetResponseSchema
type OPJWKSetResponseSchema struct {
	Keys []OPJWKSetKey `json:"keys"`
}

// GetKeys returns the value of Keys.
func (s *OPJWKSetResponseSchema) GetKeys() []OPJWKSetKey {
	return s.Keys
}

// SetKeys sets the value of Keys.
func (s *OPJWKSetResponseSchema) SetKeys(val []OPJWKSetKey) {
	s.Keys = val
}

func (*OPJWKSetResponseSchema) opCertsRes() {}

// Ref: #/components/schemas/OPLoginRequestSchema
type OPLoginRequestSchema struct {
	// Id.
	ID string `json:"id"`
	// Email.
	Email string `json:"email"`
	// Password.
	Password string `json:"password"`
}

// GetID returns the value of ID.
func (s *OPLoginRequestSchema) GetID() string {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *OPLoginRequestSchema) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *OPLoginRequestSchema) GetPassword() string {
	return s.Password
}

// SetID sets the value of ID.
func (s *OPLoginRequestSchema) SetID(val string) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *OPLoginRequestSchema) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *OPLoginRequestSchema) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/OPOpenIDConfigurationResponseSchema
type OPOpenIDConfigurationResponseSchema struct {
	// Http://localhost:5555/op.
	Issuer url.URL `json:"issuer"`
	// Http://localhost:5555/op/authorize.
	AuthorizationEndpoint url.URL `json:"authorization_endpoint"`
	// Http://localhost:5555/op/token.
	TokenEndpoint url.URL `json:"token_endpoint"`
	// Http://localhost:5555/op/userinfo.
	UserinfoEndpoint url.URL `json:"userinfo_endpoint"`
	// Http://localhost:5555/op/certs.
	JwksURI url.URL `json:"jwks_uri"`
	// Http://localhost:5555/op/revoke.
	RevocationEndpoint url.URL `json:"revocation_endpoint"`
}

// GetIssuer returns the value of Issuer.
func (s *OPOpenIDConfigurationResponseSchema) GetIssuer() url.URL {
	return s.Issuer
}

// GetAuthorizationEndpoint returns the value of AuthorizationEndpoint.
func (s *OPOpenIDConfigurationResponseSchema) GetAuthorizationEndpoint() url.URL {
	return s.AuthorizationEndpoint
}

// GetTokenEndpoint returns the value of TokenEndpoint.
func (s *OPOpenIDConfigurationResponseSchema) GetTokenEndpoint() url.URL {
	return s.TokenEndpoint
}

// GetUserinfoEndpoint returns the value of UserinfoEndpoint.
func (s *OPOpenIDConfigurationResponseSchema) GetUserinfoEndpoint() url.URL {
	return s.UserinfoEndpoint
}

// GetJwksURI returns the value of JwksURI.
func (s *OPOpenIDConfigurationResponseSchema) GetJwksURI() url.URL {
	return s.JwksURI
}

// GetRevocationEndpoint returns the value of RevocationEndpoint.
func (s *OPOpenIDConfigurationResponseSchema) GetRevocationEndpoint() url.URL {
	return s.RevocationEndpoint
}

// SetIssuer sets the value of Issuer.
func (s *OPOpenIDConfigurationResponseSchema) SetIssuer(val url.URL) {
	s.Issuer = val
}

// SetAuthorizationEndpoint sets the value of AuthorizationEndpoint.
func (s *OPOpenIDConfigurationResponseSchema) SetAuthorizationEndpoint(val url.URL) {
	s.AuthorizationEndpoint = val
}

// SetTokenEndpoint sets the value of TokenEndpoint.
func (s *OPOpenIDConfigurationResponseSchema) SetTokenEndpoint(val url.URL) {
	s.TokenEndpoint = val
}

// SetUserinfoEndpoint sets the value of UserinfoEndpoint.
func (s *OPOpenIDConfigurationResponseSchema) SetUserinfoEndpoint(val url.URL) {
	s.UserinfoEndpoint = val
}

// SetJwksURI sets the value of JwksURI.
func (s *OPOpenIDConfigurationResponseSchema) SetJwksURI(val url.URL) {
	s.JwksURI = val
}

// SetRevocationEndpoint sets the value of RevocationEndpoint.
func (s *OPOpenIDConfigurationResponseSchema) SetRevocationEndpoint(val url.URL) {
	s.RevocationEndpoint = val
}

func (*OPOpenIDConfigurationResponseSchema) opOpenIDConfigurationRes() {}

// Https://openid-foundation-japan.github.io/rfc7009.ja.html#anchor2.
// Ref: #/components/schemas/OPRevokeRequestSchema
type OPRevokeRequestSchema struct {
	// Token.
	Token string `json:"token"`
	// Token_type_hint.
	TokenTypeHint OptOPRevokeRequestSchemaTokenTypeHint `json:"token_type_hint"`
}

// GetToken returns the value of Token.
func (s *OPRevokeRequestSchema) GetToken() string {
	return s.Token
}

// GetTokenTypeHint returns the value of TokenTypeHint.
func (s *OPRevokeRequestSchema) GetTokenTypeHint() OptOPRevokeRequestSchemaTokenTypeHint {
	return s.TokenTypeHint
}

// SetToken sets the value of Token.
func (s *OPRevokeRequestSchema) SetToken(val string) {
	s.Token = val
}

// SetTokenTypeHint sets the value of TokenTypeHint.
func (s *OPRevokeRequestSchema) SetTokenTypeHint(val OptOPRevokeRequestSchemaTokenTypeHint) {
	s.TokenTypeHint = val
}

// Token_type_hint.
type OPRevokeRequestSchemaTokenTypeHint string

const (
	OPRevokeRequestSchemaTokenTypeHintAccessToken  OPRevokeRequestSchemaTokenTypeHint = "access_token"
	OPRevokeRequestSchemaTokenTypeHintRefreshToken OPRevokeRequestSchemaTokenTypeHint = "refresh_token"
)

// AllValues returns all OPRevokeRequestSchemaTokenTypeHint values.
func (OPRevokeRequestSchemaTokenTypeHint) AllValues() []OPRevokeRequestSchemaTokenTypeHint {
	return []OPRevokeRequestSchemaTokenTypeHint{
		OPRevokeRequestSchemaTokenTypeHintAccessToken,
		OPRevokeRequestSchemaTokenTypeHintRefreshToken,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OPRevokeRequestSchemaTokenTypeHint) MarshalText() ([]byte, error) {
	switch s {
	case OPRevokeRequestSchemaTokenTypeHintAccessToken:
		return []byte(s), nil
	case OPRevokeRequestSchemaTokenTypeHintRefreshToken:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OPRevokeRequestSchemaTokenTypeHint) UnmarshalText(data []byte) error {
	switch OPRevokeRequestSchemaTokenTypeHint(data) {
	case OPRevokeRequestSchemaTokenTypeHintAccessToken:
		*s = OPRevokeRequestSchemaTokenTypeHintAccessToken
		return nil
	case OPRevokeRequestSchemaTokenTypeHintRefreshToken:
		*s = OPRevokeRequestSchemaTokenTypeHintRefreshToken
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OPTokenRequestSchema
type OPTokenRequestSchema struct {
	// Grant_type.
	GrantType OPTokenRequestSchemaGrantType `json:"grant_type"`
	// Code.
	Code string `json:"code"`
	// Http://localhost:5555/rp/callback.
	RedirectURI url.URL `json:"redirect_uri"`
	// Refresh_token.
	RefreshToken OptString `json:"refresh_token"`
	// Client_id.
	ClientID OptString `json:"client_id"`
	// Client_secret.
	ClientSecret OptString `json:"client_secret"`
	Scope        OptString `json:"scope"`
}

// GetGrantType returns the value of GrantType.
func (s *OPTokenRequestSchema) GetGrantType() OPTokenRequestSchemaGrantType {
	return s.GrantType
}

// GetCode returns the value of Code.
func (s *OPTokenRequestSchema) GetCode() string {
	return s.Code
}

// GetRedirectURI returns the value of RedirectURI.
func (s *OPTokenRequestSchema) GetRedirectURI() url.URL {
	return s.RedirectURI
}

// GetRefreshToken returns the value of RefreshToken.
func (s *OPTokenRequestSchema) GetRefreshToken() OptString {
	return s.RefreshToken
}

// GetClientID returns the value of ClientID.
func (s *OPTokenRequestSchema) GetClientID() OptString {
	return s.ClientID
}

// GetClientSecret returns the value of ClientSecret.
func (s *OPTokenRequestSchema) GetClientSecret() OptString {
	return s.ClientSecret
}

// GetScope returns the value of Scope.
func (s *OPTokenRequestSchema) GetScope() OptString {
	return s.Scope
}

// SetGrantType sets the value of GrantType.
func (s *OPTokenRequestSchema) SetGrantType(val OPTokenRequestSchemaGrantType) {
	s.GrantType = val
}

// SetCode sets the value of Code.
func (s *OPTokenRequestSchema) SetCode(val string) {
	s.Code = val
}

// SetRedirectURI sets the value of RedirectURI.
func (s *OPTokenRequestSchema) SetRedirectURI(val url.URL) {
	s.RedirectURI = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *OPTokenRequestSchema) SetRefreshToken(val OptString) {
	s.RefreshToken = val
}

// SetClientID sets the value of ClientID.
func (s *OPTokenRequestSchema) SetClientID(val OptString) {
	s.ClientID = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *OPTokenRequestSchema) SetClientSecret(val OptString) {
	s.ClientSecret = val
}

// SetScope sets the value of Scope.
func (s *OPTokenRequestSchema) SetScope(val OptString) {
	s.Scope = val
}

// Grant_type.
type OPTokenRequestSchemaGrantType string

const (
	OPTokenRequestSchemaGrantTypeAuthorizationCode OPTokenRequestSchemaGrantType = "authorization_code"
	OPTokenRequestSchemaGrantTypeRefreshToken      OPTokenRequestSchemaGrantType = "refresh_token"
)

// AllValues returns all OPTokenRequestSchemaGrantType values.
func (OPTokenRequestSchemaGrantType) AllValues() []OPTokenRequestSchemaGrantType {
	return []OPTokenRequestSchemaGrantType{
		OPTokenRequestSchemaGrantTypeAuthorizationCode,
		OPTokenRequestSchemaGrantTypeRefreshToken,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OPTokenRequestSchemaGrantType) MarshalText() ([]byte, error) {
	switch s {
	case OPTokenRequestSchemaGrantTypeAuthorizationCode:
		return []byte(s), nil
	case OPTokenRequestSchemaGrantTypeRefreshToken:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OPTokenRequestSchemaGrantType) UnmarshalText(data []byte) error {
	switch OPTokenRequestSchemaGrantType(data) {
	case OPTokenRequestSchemaGrantTypeAuthorizationCode:
		*s = OPTokenRequestSchemaGrantTypeAuthorizationCode
		return nil
	case OPTokenRequestSchemaGrantTypeRefreshToken:
		*s = OPTokenRequestSchemaGrantTypeRefreshToken
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenResponse.
// Ref: #/components/schemas/OPTokenResponseSchema
type OPTokenResponseSchema struct {
	// Access_token.
	AccessToken string `json:"access_token"`
	// Token_type.
	TokenType string `json:"token_type"`
	// Refresh_token.
	RefreshToken string `json:"refresh_token"`
	// Expires_in.
	ExpiresIn int `json:"expires_in"`
	// Id_token.
	IDToken string `json:"id_token"`
	// Scope.
	Scope []OPTokenResponseSchemaScopeItem `json:"scope"`
}

// GetAccessToken returns the value of AccessToken.
func (s *OPTokenResponseSchema) GetAccessToken() string {
	return s.AccessToken
}

// GetTokenType returns the value of TokenType.
func (s *OPTokenResponseSchema) GetTokenType() string {
	return s.TokenType
}

// GetRefreshToken returns the value of RefreshToken.
func (s *OPTokenResponseSchema) GetRefreshToken() string {
	return s.RefreshToken
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *OPTokenResponseSchema) GetExpiresIn() int {
	return s.ExpiresIn
}

// GetIDToken returns the value of IDToken.
func (s *OPTokenResponseSchema) GetIDToken() string {
	return s.IDToken
}

// GetScope returns the value of Scope.
func (s *OPTokenResponseSchema) GetScope() []OPTokenResponseSchemaScopeItem {
	return s.Scope
}

// SetAccessToken sets the value of AccessToken.
func (s *OPTokenResponseSchema) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetTokenType sets the value of TokenType.
func (s *OPTokenResponseSchema) SetTokenType(val string) {
	s.TokenType = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *OPTokenResponseSchema) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *OPTokenResponseSchema) SetExpiresIn(val int) {
	s.ExpiresIn = val
}

// SetIDToken sets the value of IDToken.
func (s *OPTokenResponseSchema) SetIDToken(val string) {
	s.IDToken = val
}

// SetScope sets the value of Scope.
func (s *OPTokenResponseSchema) SetScope(val []OPTokenResponseSchemaScopeItem) {
	s.Scope = val
}

// OPTokenResponseSchemaHeaders wraps OPTokenResponseSchema with response headers.
type OPTokenResponseSchemaHeaders struct {
	CacheControl OptString
	Pragma       OptString
	Response     OPTokenResponseSchema
}

// GetCacheControl returns the value of CacheControl.
func (s *OPTokenResponseSchemaHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetPragma returns the value of Pragma.
func (s *OPTokenResponseSchemaHeaders) GetPragma() OptString {
	return s.Pragma
}

// GetResponse returns the value of Response.
func (s *OPTokenResponseSchemaHeaders) GetResponse() OPTokenResponseSchema {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *OPTokenResponseSchemaHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetPragma sets the value of Pragma.
func (s *OPTokenResponseSchemaHeaders) SetPragma(val OptString) {
	s.Pragma = val
}

// SetResponse sets the value of Response.
func (s *OPTokenResponseSchemaHeaders) SetResponse(val OPTokenResponseSchema) {
	s.Response = val
}

func (*OPTokenResponseSchemaHeaders) opTokenRes() {}

type OPTokenResponseSchemaScopeItem string

const (
	OPTokenResponseSchemaScopeItemOpenid  OPTokenResponseSchemaScopeItem = "openid"
	OPTokenResponseSchemaScopeItemProfile OPTokenResponseSchemaScopeItem = "profile"
	OPTokenResponseSchemaScopeItemEmail   OPTokenResponseSchemaScopeItem = "email"
)

// AllValues returns all OPTokenResponseSchemaScopeItem values.
func (OPTokenResponseSchemaScopeItem) AllValues() []OPTokenResponseSchemaScopeItem {
	return []OPTokenResponseSchemaScopeItem{
		OPTokenResponseSchemaScopeItemOpenid,
		OPTokenResponseSchemaScopeItemProfile,
		OPTokenResponseSchemaScopeItemEmail,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OPTokenResponseSchemaScopeItem) MarshalText() ([]byte, error) {
	switch s {
	case OPTokenResponseSchemaScopeItemOpenid:
		return []byte(s), nil
	case OPTokenResponseSchemaScopeItemProfile:
		return []byte(s), nil
	case OPTokenResponseSchemaScopeItemEmail:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OPTokenResponseSchemaScopeItem) UnmarshalText(data []byte) error {
	switch OPTokenResponseSchemaScopeItem(data) {
	case OPTokenResponseSchemaScopeItemOpenid:
		*s = OPTokenResponseSchemaScopeItemOpenid
		return nil
	case OPTokenResponseSchemaScopeItemProfile:
		*s = OPTokenResponseSchemaScopeItemProfile
		return nil
	case OPTokenResponseSchemaScopeItemEmail:
		*s = OPTokenResponseSchemaScopeItemEmail
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Https://openid.net/specs/openid-connect-core-1_0.html#UserInfoResponse.
// Ref: #/components/schemas/OPUserInfoResponseSchema
type OPUserInfoResponseSchema struct {
	// Sub.
	Sub string `json:"sub"`
	// Profile.
	Profile OptString `json:"profile"`
	// Email.
	Email OptString `json:"email"`
}

// GetSub returns the value of Sub.
func (s *OPUserInfoResponseSchema) GetSub() string {
	return s.Sub
}

// GetProfile returns the value of Profile.
func (s *OPUserInfoResponseSchema) GetProfile() OptString {
	return s.Profile
}

// GetEmail returns the value of Email.
func (s *OPUserInfoResponseSchema) GetEmail() OptString {
	return s.Email
}

// SetSub sets the value of Sub.
func (s *OPUserInfoResponseSchema) SetSub(val string) {
	s.Sub = val
}

// SetProfile sets the value of Profile.
func (s *OPUserInfoResponseSchema) SetProfile(val OptString) {
	s.Profile = val
}

// SetEmail sets the value of Email.
func (s *OPUserInfoResponseSchema) SetEmail(val OptString) {
	s.Email = val
}

func (*OPUserInfoResponseSchema) opUserinfoRes() {}

type OpAuthorizeBadRequest struct {
	// Error.
	Error OptOpAuthorizeBadRequestError `json:"error"`
}

// GetError returns the value of Error.
func (s *OpAuthorizeBadRequest) GetError() OptOpAuthorizeBadRequestError {
	return s.Error
}

// SetError sets the value of Error.
func (s *OpAuthorizeBadRequest) SetError(val OptOpAuthorizeBadRequestError) {
	s.Error = val
}

func (*OpAuthorizeBadRequest) opAuthorizeRes() {}

// Error.
type OpAuthorizeBadRequestError string

const (
	OpAuthorizeBadRequestErrorInvalidRequest OpAuthorizeBadRequestError = "invalid_request"
	OpAuthorizeBadRequestErrorInvalidScope   OpAuthorizeBadRequestError = "invalid_scope"
)

// AllValues returns all OpAuthorizeBadRequestError values.
func (OpAuthorizeBadRequestError) AllValues() []OpAuthorizeBadRequestError {
	return []OpAuthorizeBadRequestError{
		OpAuthorizeBadRequestErrorInvalidRequest,
		OpAuthorizeBadRequestErrorInvalidScope,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpAuthorizeBadRequestError) MarshalText() ([]byte, error) {
	switch s {
	case OpAuthorizeBadRequestErrorInvalidRequest:
		return []byte(s), nil
	case OpAuthorizeBadRequestErrorInvalidScope:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpAuthorizeBadRequestError) UnmarshalText(data []byte) error {
	switch OpAuthorizeBadRequestError(data) {
	case OpAuthorizeBadRequestErrorInvalidRequest:
		*s = OpAuthorizeBadRequestErrorInvalidRequest
		return nil
	case OpAuthorizeBadRequestErrorInvalidScope:
		*s = OpAuthorizeBadRequestErrorInvalidScope
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OpAuthorizeForbidden struct {
	// Error.
	Error OptOpAuthorizeForbiddenError `json:"error"`
}

// GetError returns the value of Error.
func (s *OpAuthorizeForbidden) GetError() OptOpAuthorizeForbiddenError {
	return s.Error
}

// SetError sets the value of Error.
func (s *OpAuthorizeForbidden) SetError(val OptOpAuthorizeForbiddenError) {
	s.Error = val
}

func (*OpAuthorizeForbidden) opAuthorizeRes() {}

// Error.
type OpAuthorizeForbiddenError string

const (
	OpAuthorizeForbiddenErrorAccessDenied OpAuthorizeForbiddenError = "access_denied"
)

// AllValues returns all OpAuthorizeForbiddenError values.
func (OpAuthorizeForbiddenError) AllValues() []OpAuthorizeForbiddenError {
	return []OpAuthorizeForbiddenError{
		OpAuthorizeForbiddenErrorAccessDenied,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpAuthorizeForbiddenError) MarshalText() ([]byte, error) {
	switch s {
	case OpAuthorizeForbiddenErrorAccessDenied:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpAuthorizeForbiddenError) UnmarshalText(data []byte) error {
	switch OpAuthorizeForbiddenError(data) {
	case OpAuthorizeForbiddenErrorAccessDenied:
		*s = OpAuthorizeForbiddenErrorAccessDenied
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// OpAuthorizeFound is response for OpAuthorize operation.
type OpAuthorizeFound struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *OpAuthorizeFound) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *OpAuthorizeFound) SetLocation(val OptURI) {
	s.Location = val
}

func (*OpAuthorizeFound) opAuthorizeRes() {}

type OpAuthorizeInternalServerError struct {
	// Error.
	Error OptOpAuthorizeInternalServerErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *OpAuthorizeInternalServerError) GetError() OptOpAuthorizeInternalServerErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *OpAuthorizeInternalServerError) SetError(val OptOpAuthorizeInternalServerErrorError) {
	s.Error = val
}

func (*OpAuthorizeInternalServerError) opAuthorizeRes() {}

// Error.
type OpAuthorizeInternalServerErrorError string

const (
	OpAuthorizeInternalServerErrorErrorServerError OpAuthorizeInternalServerErrorError = "server_error"
)

// AllValues returns all OpAuthorizeInternalServerErrorError values.
func (OpAuthorizeInternalServerErrorError) AllValues() []OpAuthorizeInternalServerErrorError {
	return []OpAuthorizeInternalServerErrorError{
		OpAuthorizeInternalServerErrorErrorServerError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpAuthorizeInternalServerErrorError) MarshalText() ([]byte, error) {
	switch s {
	case OpAuthorizeInternalServerErrorErrorServerError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpAuthorizeInternalServerErrorError) UnmarshalText(data []byte) error {
	switch OpAuthorizeInternalServerErrorError(data) {
	case OpAuthorizeInternalServerErrorErrorServerError:
		*s = OpAuthorizeInternalServerErrorErrorServerError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OpAuthorizeResponseType string

const (
	OpAuthorizeResponseTypeCode OpAuthorizeResponseType = "code"
)

// AllValues returns all OpAuthorizeResponseType values.
func (OpAuthorizeResponseType) AllValues() []OpAuthorizeResponseType {
	return []OpAuthorizeResponseType{
		OpAuthorizeResponseTypeCode,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpAuthorizeResponseType) MarshalText() ([]byte, error) {
	switch s {
	case OpAuthorizeResponseTypeCode:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpAuthorizeResponseType) UnmarshalText(data []byte) error {
	switch OpAuthorizeResponseType(data) {
	case OpAuthorizeResponseTypeCode:
		*s = OpAuthorizeResponseTypeCode
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OpAuthorizeUnauthorized struct {
	// Error.
	Error OptOpAuthorizeUnauthorizedError `json:"error"`
}

// GetError returns the value of Error.
func (s *OpAuthorizeUnauthorized) GetError() OptOpAuthorizeUnauthorizedError {
	return s.Error
}

// SetError sets the value of Error.
func (s *OpAuthorizeUnauthorized) SetError(val OptOpAuthorizeUnauthorizedError) {
	s.Error = val
}

func (*OpAuthorizeUnauthorized) opAuthorizeRes() {}

// Error.
type OpAuthorizeUnauthorizedError string

const (
	OpAuthorizeUnauthorizedErrorUnauthorizedClient OpAuthorizeUnauthorizedError = "unauthorized_client"
)

// AllValues returns all OpAuthorizeUnauthorizedError values.
func (OpAuthorizeUnauthorizedError) AllValues() []OpAuthorizeUnauthorizedError {
	return []OpAuthorizeUnauthorizedError{
		OpAuthorizeUnauthorizedErrorUnauthorizedClient,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpAuthorizeUnauthorizedError) MarshalText() ([]byte, error) {
	switch s {
	case OpAuthorizeUnauthorizedErrorUnauthorizedClient:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpAuthorizeUnauthorizedError) UnmarshalText(data []byte) error {
	switch OpAuthorizeUnauthorizedError(data) {
	case OpAuthorizeUnauthorizedErrorUnauthorizedClient:
		*s = OpAuthorizeUnauthorizedErrorUnauthorizedClient
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// OpCallbackFound is response for OpCallback operation.
type OpCallbackFound struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *OpCallbackFound) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *OpCallbackFound) SetLocation(val OptURI) {
	s.Location = val
}

func (*OpCallbackFound) opCallbackRes() {}

// OpCallbackInternalServerError is response for OpCallback operation.
type OpCallbackInternalServerError struct{}

func (*OpCallbackInternalServerError) opCallbackRes() {}

// OpCertsInternalServerError is response for OpCerts operation.
type OpCertsInternalServerError struct{}

func (*OpCertsInternalServerError) opCertsRes() {}

// OpLoginFound is response for OpLogin operation.
type OpLoginFound struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *OpLoginFound) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *OpLoginFound) SetLocation(val OptURI) {
	s.Location = val
}

func (*OpLoginFound) opLoginRes() {}

// OpLoginInternalServerError is response for OpLogin operation.
type OpLoginInternalServerError struct{}

func (*OpLoginInternalServerError) opLoginRes() {}

// OpLoginViewInternalServerError is response for OpLoginView operation.
type OpLoginViewInternalServerError struct{}

func (*OpLoginViewInternalServerError) opLoginViewRes() {}

type OpLoginViewOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s OpLoginViewOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// OpLoginViewOKHeaders wraps OpLoginViewOK with response headers.
type OpLoginViewOKHeaders struct {
	XRequestID OptString
	Response   OpLoginViewOK
}

// GetXRequestID returns the value of XRequestID.
func (s *OpLoginViewOKHeaders) GetXRequestID() OptString {
	return s.XRequestID
}

// GetResponse returns the value of Response.
func (s *OpLoginViewOKHeaders) GetResponse() OpLoginViewOK {
	return s.Response
}

// SetXRequestID sets the value of XRequestID.
func (s *OpLoginViewOKHeaders) SetXRequestID(val OptString) {
	s.XRequestID = val
}

// SetResponse sets the value of Response.
func (s *OpLoginViewOKHeaders) SetResponse(val OpLoginViewOK) {
	s.Response = val
}

func (*OpLoginViewOKHeaders) opLoginViewRes() {}

// OpOpenIDConfigurationInternalServerError is response for OpOpenIDConfiguration operation.
type OpOpenIDConfigurationInternalServerError struct{}

func (*OpOpenIDConfigurationInternalServerError) opOpenIDConfigurationRes() {}

type OpRevokeBadRequest struct {
	// Error.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *OpRevokeBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *OpRevokeBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*OpRevokeBadRequest) opRevokeRes() {}

// OpRevokeInternalServerError is response for OpRevoke operation.
type OpRevokeInternalServerError struct{}

func (*OpRevokeInternalServerError) opRevokeRes() {}

// OpRevokeOK is response for OpRevoke operation.
type OpRevokeOK struct{}

func (*OpRevokeOK) opRevokeRes() {}

type OpTokenBadRequest struct {
	// Error.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *OpTokenBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *OpTokenBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*OpTokenBadRequest) opTokenRes() {}

// OpTokenInternalServerError is response for OpToken operation.
type OpTokenInternalServerError struct{}

func (*OpTokenInternalServerError) opTokenRes() {}

// OpUserinfoInternalServerError is response for OpUserinfo operation.
type OpUserinfoInternalServerError struct{}

func (*OpUserinfoInternalServerError) opUserinfoRes() {}

// NewOptIdPSigninRequestSchema returns new OptIdPSigninRequestSchema with value set to v.
func NewOptIdPSigninRequestSchema(v IdPSigninRequestSchema) OptIdPSigninRequestSchema {
	return OptIdPSigninRequestSchema{
		Value: v,
		Set:   true,
	}
}

// OptIdPSigninRequestSchema is optional IdPSigninRequestSchema.
type OptIdPSigninRequestSchema struct {
	Value IdPSigninRequestSchema
	Set   bool
}

// IsSet returns true if OptIdPSigninRequestSchema was set.
func (o OptIdPSigninRequestSchema) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIdPSigninRequestSchema) Reset() {
	var v IdPSigninRequestSchema
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIdPSigninRequestSchema) SetTo(v IdPSigninRequestSchema) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIdPSigninRequestSchema) Get() (v IdPSigninRequestSchema, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIdPSigninRequestSchema) Or(d IdPSigninRequestSchema) IdPSigninRequestSchema {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIdPSignupRequestSchema returns new OptIdPSignupRequestSchema with value set to v.
func NewOptIdPSignupRequestSchema(v IdPSignupRequestSchema) OptIdPSignupRequestSchema {
	return OptIdPSignupRequestSchema{
		Value: v,
		Set:   true,
	}
}

// OptIdPSignupRequestSchema is optional IdPSignupRequestSchema.
type OptIdPSignupRequestSchema struct {
	Value IdPSignupRequestSchema
	Set   bool
}

// IsSet returns true if OptIdPSignupRequestSchema was set.
func (o OptIdPSignupRequestSchema) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIdPSignupRequestSchema) Reset() {
	var v IdPSignupRequestSchema
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIdPSignupRequestSchema) SetTo(v IdPSignupRequestSchema) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIdPSignupRequestSchema) Get() (v IdPSignupRequestSchema, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIdPSignupRequestSchema) Or(d IdPSignupRequestSchema) IdPSignupRequestSchema {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOPRevokeRequestSchemaTokenTypeHint returns new OptOPRevokeRequestSchemaTokenTypeHint with value set to v.
func NewOptOPRevokeRequestSchemaTokenTypeHint(v OPRevokeRequestSchemaTokenTypeHint) OptOPRevokeRequestSchemaTokenTypeHint {
	return OptOPRevokeRequestSchemaTokenTypeHint{
		Value: v,
		Set:   true,
	}
}

// OptOPRevokeRequestSchemaTokenTypeHint is optional OPRevokeRequestSchemaTokenTypeHint.
type OptOPRevokeRequestSchemaTokenTypeHint struct {
	Value OPRevokeRequestSchemaTokenTypeHint
	Set   bool
}

// IsSet returns true if OptOPRevokeRequestSchemaTokenTypeHint was set.
func (o OptOPRevokeRequestSchemaTokenTypeHint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOPRevokeRequestSchemaTokenTypeHint) Reset() {
	var v OPRevokeRequestSchemaTokenTypeHint
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOPRevokeRequestSchemaTokenTypeHint) SetTo(v OPRevokeRequestSchemaTokenTypeHint) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOPRevokeRequestSchemaTokenTypeHint) Get() (v OPRevokeRequestSchemaTokenTypeHint, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOPRevokeRequestSchemaTokenTypeHint) Or(d OPRevokeRequestSchemaTokenTypeHint) OPRevokeRequestSchemaTokenTypeHint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpAuthorizeBadRequestError returns new OptOpAuthorizeBadRequestError with value set to v.
func NewOptOpAuthorizeBadRequestError(v OpAuthorizeBadRequestError) OptOpAuthorizeBadRequestError {
	return OptOpAuthorizeBadRequestError{
		Value: v,
		Set:   true,
	}
}

// OptOpAuthorizeBadRequestError is optional OpAuthorizeBadRequestError.
type OptOpAuthorizeBadRequestError struct {
	Value OpAuthorizeBadRequestError
	Set   bool
}

// IsSet returns true if OptOpAuthorizeBadRequestError was set.
func (o OptOpAuthorizeBadRequestError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpAuthorizeBadRequestError) Reset() {
	var v OpAuthorizeBadRequestError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpAuthorizeBadRequestError) SetTo(v OpAuthorizeBadRequestError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpAuthorizeBadRequestError) Get() (v OpAuthorizeBadRequestError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpAuthorizeBadRequestError) Or(d OpAuthorizeBadRequestError) OpAuthorizeBadRequestError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpAuthorizeForbiddenError returns new OptOpAuthorizeForbiddenError with value set to v.
func NewOptOpAuthorizeForbiddenError(v OpAuthorizeForbiddenError) OptOpAuthorizeForbiddenError {
	return OptOpAuthorizeForbiddenError{
		Value: v,
		Set:   true,
	}
}

// OptOpAuthorizeForbiddenError is optional OpAuthorizeForbiddenError.
type OptOpAuthorizeForbiddenError struct {
	Value OpAuthorizeForbiddenError
	Set   bool
}

// IsSet returns true if OptOpAuthorizeForbiddenError was set.
func (o OptOpAuthorizeForbiddenError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpAuthorizeForbiddenError) Reset() {
	var v OpAuthorizeForbiddenError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpAuthorizeForbiddenError) SetTo(v OpAuthorizeForbiddenError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpAuthorizeForbiddenError) Get() (v OpAuthorizeForbiddenError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpAuthorizeForbiddenError) Or(d OpAuthorizeForbiddenError) OpAuthorizeForbiddenError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpAuthorizeInternalServerErrorError returns new OptOpAuthorizeInternalServerErrorError with value set to v.
func NewOptOpAuthorizeInternalServerErrorError(v OpAuthorizeInternalServerErrorError) OptOpAuthorizeInternalServerErrorError {
	return OptOpAuthorizeInternalServerErrorError{
		Value: v,
		Set:   true,
	}
}

// OptOpAuthorizeInternalServerErrorError is optional OpAuthorizeInternalServerErrorError.
type OptOpAuthorizeInternalServerErrorError struct {
	Value OpAuthorizeInternalServerErrorError
	Set   bool
}

// IsSet returns true if OptOpAuthorizeInternalServerErrorError was set.
func (o OptOpAuthorizeInternalServerErrorError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpAuthorizeInternalServerErrorError) Reset() {
	var v OpAuthorizeInternalServerErrorError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpAuthorizeInternalServerErrorError) SetTo(v OpAuthorizeInternalServerErrorError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpAuthorizeInternalServerErrorError) Get() (v OpAuthorizeInternalServerErrorError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpAuthorizeInternalServerErrorError) Or(d OpAuthorizeInternalServerErrorError) OpAuthorizeInternalServerErrorError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpAuthorizeUnauthorizedError returns new OptOpAuthorizeUnauthorizedError with value set to v.
func NewOptOpAuthorizeUnauthorizedError(v OpAuthorizeUnauthorizedError) OptOpAuthorizeUnauthorizedError {
	return OptOpAuthorizeUnauthorizedError{
		Value: v,
		Set:   true,
	}
}

// OptOpAuthorizeUnauthorizedError is optional OpAuthorizeUnauthorizedError.
type OptOpAuthorizeUnauthorizedError struct {
	Value OpAuthorizeUnauthorizedError
	Set   bool
}

// IsSet returns true if OptOpAuthorizeUnauthorizedError was set.
func (o OptOpAuthorizeUnauthorizedError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpAuthorizeUnauthorizedError) Reset() {
	var v OpAuthorizeUnauthorizedError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpAuthorizeUnauthorizedError) SetTo(v OpAuthorizeUnauthorizedError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpAuthorizeUnauthorizedError) Get() (v OpAuthorizeUnauthorizedError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpAuthorizeUnauthorizedError) Or(d OpAuthorizeUnauthorizedError) OpAuthorizeUnauthorizedError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// RpCallbackBadRequest is response for RpCallback operation.
type RpCallbackBadRequest struct{}

func (*RpCallbackBadRequest) rpCallbackRes() {}

// RpCallbackInternalServerError is response for RpCallback operation.
type RpCallbackInternalServerError struct{}

func (*RpCallbackInternalServerError) rpCallbackRes() {}

type RpCallbackOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s RpCallbackOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*RpCallbackOK) rpCallbackRes() {}

// RpLoginFound is response for RpLogin operation.
type RpLoginFound struct {
	Location  OptURI
	SetCookie OptString
}

// GetLocation returns the value of Location.
func (s *RpLoginFound) GetLocation() OptURI {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *RpLoginFound) GetSetCookie() OptString {
	return s.SetCookie
}

// SetLocation sets the value of Location.
func (s *RpLoginFound) SetLocation(val OptURI) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *RpLoginFound) SetSetCookie(val OptString) {
	s.SetCookie = val
}

func (*RpLoginFound) rpLoginRes() {}

// RpLoginInternalServerError is response for RpLogin operation.
type RpLoginInternalServerError struct{}

func (*RpLoginInternalServerError) rpLoginRes() {}
