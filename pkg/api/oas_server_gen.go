// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// Health implements health operation.
	//
	// Health.
	//
	// GET /health
	Health(ctx context.Context) (HealthRes, error)
	// IdpSignin implements idpSignin operation.
	//
	// Sign In.
	//
	// POST /idp/signin
	IdpSignin(ctx context.Context, req OptIdPSigninRequestSchema) (IdpSigninRes, error)
	// IdpSignup implements idpSignup operation.
	//
	// Sign Up.
	//
	// POST /idp/signup
	IdpSignup(ctx context.Context, req OptIdPSignupRequestSchema) (IdpSignupRes, error)
	// OpAuthorize implements opAuthorize operation.
	//
	// Authentication Request.
	//
	// GET /op/authorize
	OpAuthorize(ctx context.Context, params OpAuthorizeParams) (OpAuthorizeRes, error)
	// OpCallback implements opCallback operation.
	//
	// OP Callback.
	//
	// GET /op/callback
	OpCallback(ctx context.Context, params OpCallbackParams) (OpCallbackRes, error)
	// OpCerts implements opCerts operation.
	//
	// Https://openid-foundation-japan.github.io/rfc7517.ja.html.
	//
	// GET /op/certs
	OpCerts(ctx context.Context) (OpCertsRes, error)
	// OpLogin implements opLogin operation.
	//
	// OP Login.
	//
	// POST /op/login
	OpLogin(ctx context.Context, req *OPLoginRequestSchema) (OpLoginRes, error)
	// OpLoginView implements opLoginView operation.
	//
	// OP Login.
	//
	// GET /op/login
	OpLoginView(ctx context.Context, params OpLoginViewParams) (OpLoginViewRes, error)
	// OpOpenIDConfiguration implements opOpenIDConfiguration operation.
	//
	// OpenID Provider Configuration.
	//
	// GET /op/.well-known/openid-configuration
	OpOpenIDConfiguration(ctx context.Context) (OpOpenIDConfigurationRes, error)
	// OpRevoke implements opRevoke operation.
	//
	// Https://openid.net/specs/openid-connect-core-1_0.html#Revocation.
	//
	// POST /op/revoke
	OpRevoke(ctx context.Context, req *OPRevokeRequestSchema) (OpRevokeRes, error)
	// OpToken implements opToken operation.
	//
	// Https://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenRequest.
	//
	// POST /op/token
	OpToken(ctx context.Context, req *OPTokenRequestSchema) (OpTokenRes, error)
	// OpUserinfo implements opUserinfo operation.
	//
	// Https://openid.net/specs/openid-connect-core-1_0.html#UserInfo.
	//
	// GET /op/userinfo
	OpUserinfo(ctx context.Context) (OpUserinfoRes, error)
	// RpCallback implements rpCallback operation.
	//
	// RP Callback.
	//
	// GET /rp/callback
	RpCallback(ctx context.Context, params RpCallbackParams) (RpCallbackRes, error)
	// RpLogin implements rpLogin operation.
	//
	// RP Login.
	//
	// GET /rp/login
	RpLogin(ctx context.Context) (RpLoginRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
